#!/usr/bin/python
# adr_conv.py
#
# Converts a vCard address book into abook addressbook format
#
# Author:   Gavin Costello (gavcos@gmail.com)
# Date:     19.02.2009

import optparse

desc="""This program converts a gmail vCard address book into a format readable by abook
(http://abook.sourceforge.net).

To export your gmail contacts in vCard format, select Contacts -> Export and choose the 3rd export format (vCard).

The file will be saved by default as contacts.vcf

"""

parser = optparse.OptionParser(description=desc, version='%prog version 1.0')

parser.add_option('-i', '--inputfile', \
        dest='inputfile', action='store', default='contacts.vcf', \
        help='The name of the vCard file containing the contacts to convert (default=%default)')
parser.add_option('-o', '--outputfile', \
        dest='outputfile', action='store', default='addressbook', \
        help='The name of the output file to be generated by this script (default=%default)')
parser.add_option('-d', '--debug', \
        dest='debug', action='store_true', default=False,
        help='Print debug statements (default=%default)')

(opts, args) = parser.parse_args()

name = '';  # Contact name
phone = ''; # Contact phone
email = ''; # Contact email
nick = '';  # Contact nickname
org = ''; # Contact organisation
note = ''; # Any notes

adr_count = 0
count = 0; # Contacts count

# Open input file, read-only
try:
    cfile = open(opts.inputfile, 'r')
except IOError:
    print u'Unable to open input file: %s' % opts.inputfile
    raise

# Open output file for writing
try:
    ofile = open(opts.outputfile, 'w+')
except IOError:
    print u'Unable to open output file: %s' % opts.outputfile
    raise

ofile.write(u'\n')
ofile.write(u'[format]\n')
ofile.write(u'program=abook\n')
ofile.write(u'\n')

# Loop through input file
for line in cfile.readlines():
    # Name field
    if (line.startswith('FN')):
        name = line.split(':')[1].strip()
        #name = unicode(name, 'utf-8')
        ofile.write(u'\n')
        ofile.write(u'[%d]\n' % count)
        count += 1
        adr_count = 0
        try:
            name = unicode(name, 'ascii')
        except UnicodeError:
            name = unicode(name, 'utf-8')
        else:
            # value was valid ASCII date
            pass
        name = name.encode('utf-8', 'replace')
        if opts.debug:
            print name,
        if (name!=""):
            ofile.write('name=%s\n' % name,)
    elif (line.startswith('EMAIL')):
        email = line.split(':')[1].strip()
        ofile.write(u'email=%s\n' % email,)
    elif (line.startswith('TEL')):
        # Verify if it's a fax number
        parts = line.split(';')
        if (len(parts) > 2): # Fax number
            phone = parts[2].split(':')[1].strip()
            ofile.write(u'fax=%s\n' % phone,)
            continue

        # Normal telephone number
        try:
            tel = parts[1]
        except IndexError: # Phone type not defined (other in gmail)
            phone = line.split(':')[1].strip()
            ofile.write(u'mobile=%s\n' % phone,)
            continue

        fulltype = tel.split('=')[1]
        type = fulltype.split(':')[0]
        if opts.debug:
            print u'type=%s' % type,

        phone = line.split(':')[1].strip()
        if (type == 'HOME'):
            ofile.write(u'phone=%s\n' % phone,)
        if (type == 'CELL'):
            ofile.write(u'mobile=%s\n' % phone,)
        if (type == 'WORK'):
            ofile.write(u'workphone=%s\n' % phone,)
    elif (line.startswith('ADR')):
        adr_count+=1
        #reset fields
        adr_address = ''
        adr_address2 = ''
        adr_city = ''
        adr_state = ''
        adr_zip = ''
        adr_country = ''
        parts = line.split(':')
        adra = parts[1].split(';')
        try:
            #po box is 0, not considered here.
            adr_address = adra[2].strip()
            adr_address2 = adra[1].strip() #local area
            adr_city = adra[3].strip()
            adr_state = adra[4].strip()
            adr_zip = adra[5].strip()
            adr_country = adra[6].strip()
        except IndexError:#Need to account for index out of range because of malformed addresses.
            pass #because don't care
        if (adr_count <=1):
            #put first address in abook fields
            if (adr_address != ""): ofile.write(u'address=%s\n' % adr_address,)
            if (adr_address2 != ""): ofile.write(u'address2=%s\n' % adr_address2,)
            if (adr_city != ""): ofile.write(u'city=%s\n' % adr_city,)
            if (adr_state != ""): ofile.write(u'state=%s\n' % adr_state,)
            if (adr_zip != ""): ofile.write(u'zip=%s\n' % adr_zip,)
            if (adr_country != ""): ofile.write(u'country=%s\n' % adr_country,)
        if ((adr_count <=4) & (adr_count >1)):
            #Put additional addresses in custom fields as comma separated string
            adran = [adr_address2, adr_address, adr_city, adr_state, adr_zip, adr_country]
            adr_custom = ", ".join(filter(None, adran))
            ofile.write(u'custom%i=%s\n' % (adr_count, adr_custom),)
    elif (line.startswith('NICKNAME')):
        # Nickname
        try:
            nick = line.split(':')[2].strip()
        except IndexError:
            nick = line.split(':')[1].strip()
        ofile.write(u'nick=%s\n' % nick,)
    elif (line.startswith('ORG')):
        org = line.split(':')[1].strip()
        if ((name=="") & (org!="")):
            ofile.write('name=%s\n' % org,)
        ofile.write(u'custom1=%s\n' % org,)
    elif (line.startswith('NOTE')):
        notea = line.split(':')
        notea.pop(0)
        note = " ".join(notea).strip()
        ofile.write(u'note=%s\n' % note)
    else:
        continue;

print '\n%s contacts processed' % count

try:
    cfile.close()
except IOError:
    print u'Unable to close input file: %s' % opts.inputfile
    raise
try:
    ofile.close()
except IOError:
    print u'Unable to close output file: %s' % opts.outputfile
    raise

exit(0)
